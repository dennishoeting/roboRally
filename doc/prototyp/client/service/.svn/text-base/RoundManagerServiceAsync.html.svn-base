<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_20) on Mon Jan 31 18:41:19 CET 2011 -->
<TITLE>
RoundManagerServiceAsync
</TITLE>

<META NAME="date" CONTENT="2011-01-31">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="RoundManagerServiceAsync";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/RoundManagerServiceAsync.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../prototyp/client/service/RoundManagerService.html" title="interface in prototyp.client.service"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../prototyp/client/service/UserService.html" title="interface in prototyp.client.service"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?prototyp/client/service/RoundManagerServiceAsync.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="RoundManagerServiceAsync.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
prototyp.client.service</FONT>
<BR>
Interface RoundManagerServiceAsync</H2>
<HR>
<DL>
<DT><PRE>public interface <B>RoundManagerServiceAsync</B></DL>
</PRE>

<P>
Die zugehörige Async-Klasse zu <A HREF="../../../prototyp/client/service/RoundManagerService.html" title="interface in prototyp.client.service"><CODE>RoundManagerService</CODE></A>.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>1.0</DD>
<DT><B>Author:</B></DT>
  <DD>Jannik, Andreas</DD>
</DL>
<HR>

<P>

<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#abortFromRound(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">abortFromRound</A></B>(int&nbsp;roundId,
               int&nbsp;playerId,
               com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#addPlayer(prototyp.shared.round.Player, int, com.google.gwt.user.client.rpc.AsyncCallback)">addPlayer</A></B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;newPlayer,
          int&nbsp;roundID,
          com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fügt einen Player dem PlayerManager hinzu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#addRound(prototyp.shared.round.RoundInfo, com.google.gwt.user.client.rpc.AsyncCallback)">addRound</A></B>(<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&nbsp;newRound,
         com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Integer&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/RefereePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>RefereePagePresenter</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#addWatcher(prototyp.shared.round.Watcher, int, com.google.gwt.user.client.rpc.AsyncCallback)">addWatcher</A></B>(<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&nbsp;newWatcher,
           int&nbsp;roundID,
           com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fügt einen Watcher dem PlayerManager hinzu.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#announcePowerDown(int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)">announcePowerDown</A></B>(int&nbsp;roundId,
                  int&nbsp;playerId,
                  int&nbsp;powerDownState,
                  com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spieler kündigt seinen PowerDown an</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#cardSetInSlot(int, int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)">cardSetInSlot</A></B>(int&nbsp;roundId,
              int&nbsp;playerId,
              int&nbsp;slot,
              int&nbsp;set,
              com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wird aufgerufen, wenn ein Spieler eine Karte in den Kartenslot gelegt oder entfernt hat Dieses wird per Event den anderen
 Spielern in der Runde ersichtbar</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#changePlayerToWatcher(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">changePlayerToWatcher</A></B>(int&nbsp;roundId,
                      int&nbsp;playerId,
                      com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wird aufgerufen, wenn ein Spieler in einer Spierunde endgültig gestorben ist, um den Status eines Watchers anzunehmen</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#getPlayers(int, com.google.gwt.user.client.rpc.AsyncCallback)">getPlayers</A></B>(int&nbsp;roundID,
           com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&gt;&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#getPlayersAndWatchers(int, com.google.gwt.user.client.rpc.AsyncCallback)">getPlayersAndWatchers</A></B>(int&nbsp;roundID,
                      com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&gt;&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Liefert alle Player und Watcher in einer Map.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#getRound(int, com.google.gwt.user.client.rpc.AsyncCallback)">getRound</A></B>(int&nbsp;roundID,
         com.google.gwt.user.client.rpc.AsyncCallback&lt;<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#getRounds(com.google.gwt.user.client.rpc.AsyncCallback)">getRounds</A></B>(com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&gt;&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Benutzt vom <A HREF="../../../prototyp/client/presenter/lobby/LobbyPagePresenter.html" title="class in prototyp.client.presenter.lobby"><CODE>LobbyPagePresenter</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#getWatchers(int, com.google.gwt.user.client.rpc.AsyncCallback)">getWatchers</A></B>(int&nbsp;roundID,
            com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&gt;&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#receiveProgrammingCards(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">receiveProgrammingCards</A></B>(int&nbsp;roundId,
                        int&nbsp;playerId,
                        com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.List&lt;<A HREF="../../../prototyp/shared/programmingcard/Programmingcard.html" title="class in prototyp.shared.programmingcard">Programmingcard</A>&gt;&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wird aufgerufen, um Programmierkarten per Event-Service anzufordern.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removeFromAllRounds(java.util.List, prototyp.shared.useradministration.User, com.google.gwt.user.client.rpc.AsyncCallback)">removeFromAllRounds</A></B>(java.util.List&lt;java.lang.Integer&gt;&nbsp;rounds,
                    <A HREF="../../../prototyp/shared/useradministration/User.html" title="class in prototyp.shared.useradministration">User</A>&nbsp;user,
                    com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht einen User aus allen angegebenen Rounds.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removePlayer(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">removePlayer</A></B>(int&nbsp;roundId,
             int&nbsp;player,
             com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entfernt einen Spieler aus der laufenden Spielrunde</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removePlayer(prototyp.shared.round.Player, int, com.google.gwt.user.client.rpc.AsyncCallback)">removePlayer</A></B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
             int&nbsp;roundID,
             com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht den Spieler aus der Runde</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removePlayerOnUnload(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">removePlayerOnUnload</A></B>(int&nbsp;roundId,
                     int&nbsp;playerId,
                     com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entfernt eines Spieler aus einer laufenden Runde.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removeRound(int, com.google.gwt.user.client.rpc.AsyncCallback)">removeRound</A></B>(int&nbsp;roundID,
            com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht eine Runde aus dem RoundManager (wenn der Gameinitiator auf "Abbrechen" klickt)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removeWatcher(int, int, com.google.gwt.user.client.rpc.AsyncCallback)">removeWatcher</A></B>(int&nbsp;watcher,
              int&nbsp;roundID,
              com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#removeWatcher(prototyp.shared.round.Watcher, int, com.google.gwt.user.client.rpc.AsyncCallback)">removeWatcher</A></B>(<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&nbsp;watcher,
              int&nbsp;roundID,
              com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Löscht den Beobachter aus der Runde</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#saveStatisticsInDB(int, int, java.util.Map, java.util.Map, com.google.gwt.user.client.rpc.AsyncCallback)">saveStatisticsInDB</A></B>(int&nbsp;roundId,
                   int&nbsp;winnerId,
                   java.util.Map&lt;java.lang.Integer,java.lang.Integer&gt;&nbsp;statistic,
                   java.util.Map&lt;java.lang.Integer,java.util.Set&lt;java.lang.Integer&gt;&gt;&nbsp;awards,
                   com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trägt die Statistiken der Spieler nach Beendigung einer Spielrunde in die DB ein.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#sendProgrammingcards(int, int, java.util.List, com.google.gwt.user.client.rpc.AsyncCallback)">sendProgrammingcards</A></B>(int&nbsp;roundId,
                     int&nbsp;playerId,
                     java.util.List&lt;<A HREF="../../../prototyp/shared/programmingcard/Programmingcard.html" title="class in prototyp.shared.programmingcard">Programmingcard</A>&gt;&nbsp;cards,
                     com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wird vom Spieler aufgerufen, nachdem er seine Programmierkarten gewählt und auf bereit geklickt hat.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#sendRequestStepReady(int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)">sendRequestStepReady</A></B>(int&nbsp;roundId,
                     int&nbsp;playerId,
                     int&nbsp;userState,
                     com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wird vom Spieler nach Abarbeitung eines Spielschritts aufgerufen</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#sendRestartField(int, int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)">sendRestartField</A></B>(int&nbsp;roundId,
                 int&nbsp;playerId,
                 int&nbsp;i,
                 int&nbsp;j,
                 com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spieler sendet sein Restartfield an den Server</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#setPlayerColor(prototyp.shared.round.Player, int, prototyp.shared.util.Color, com.google.gwt.user.client.rpc.AsyncCallback)">setPlayerColor</A></B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
               int&nbsp;roundID,
               <A HREF="../../../prototyp/shared/util/Color.html" title="enum in prototyp.shared.util">Color</A>&nbsp;color,
               com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setzt eine Farbe für einen Player</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#setPlayerReady(prototyp.shared.round.Player, int, boolean, com.google.gwt.user.client.rpc.AsyncCallback)">setPlayerReady</A></B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
               int&nbsp;roundID,
               boolean&nbsp;flak,
               com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setzt einen Spieler auf das Attribut flag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#setRobotPositionAndColor(int, com.google.gwt.user.client.rpc.AsyncCallback)">setRobotPositionAndColor</A></B>(int&nbsp;roundID,
                         com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setzt alle Robots der Player, setzt eine Farbe für jeden Player (der noch keine gewählt hat)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../prototyp/client/service/RoundManagerServiceAsync.html#startCountDown(int, com.google.gwt.user.client.rpc.AsyncCallback)">startCountDown</A></B>(int&nbsp;roundID,
               com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Startet den CountDown, bevor die Round los geht.</TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="addPlayer(prototyp.shared.round.Player, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
addPlayer</H3>
<PRE>
void <B>addPlayer</B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;newPlayer,
               int&nbsp;roundID,
               com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Fügt einen Player dem PlayerManager hinzu. NICHT direkt aufrufen, sondern <A HREF="../../../prototyp/server/model/RoundManager.html#addPlayer(prototyp.shared.round.Player, int)"><CODE>RoundManager.addPlayer(prototyp.shared.round.Player, int)</CODE></A>!
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newPlayer</CODE> - der zu speichernde Player</DL>
</DD>
</DL>
<HR>

<A NAME="addRound(prototyp.shared.round.RoundInfo, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
addRound</H3>
<PRE>
void <B>addRound</B>(<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&nbsp;newRound,
              com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Integer&gt;&nbsp;callback)</PRE>
<DL>
<DD>Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/RefereePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>RefereePagePresenter</CODE></A>.
 
 Speichert eine neue Runde und gibt den Index zurück (damit muss man später wieder auf die Runde zugreifen!). Wird außerdem
 ein RoundEvent für das Observer-Pattern der Round - Timo 22.09.10
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newRound</CODE> - Die Runde, die gespeichert werden soll.</DL>
</DD>
</DL>
<HR>

<A NAME="addWatcher(prototyp.shared.round.Watcher, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
addWatcher</H3>
<PRE>
void <B>addWatcher</B>(<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&nbsp;newWatcher,
                int&nbsp;roundID,
                com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Fügt einen Watcher dem PlayerManager hinzu. NICHT direkt aufrufen, sondern <A HREF="../../../prototyp/server/model/RoundManager.html#addWatcher(prototyp.shared.round.Watcher, int)"><CODE>RoundManager.addWatcher(prototyp.shared.round.Watcher, int)</CODE></A>!
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>newWatcher</CODE> - der zu speichernde Watcher</DL>
</DD>
</DL>
<HR>

<A NAME="announcePowerDown(int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
announcePowerDown</H3>
<PRE>
void <B>announcePowerDown</B>(int&nbsp;roundId,
                       int&nbsp;playerId,
                       int&nbsp;powerDownState,
                       com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Spieler kündigt seinen PowerDown an
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>powerDownState</CODE> - 1, wenn angekündigt; 2, wenn powerDown<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="cardSetInSlot(int, int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
cardSetInSlot</H3>
<PRE>
void <B>cardSetInSlot</B>(int&nbsp;roundId,
                   int&nbsp;playerId,
                   int&nbsp;slot,
                   int&nbsp;set,
                   com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Wird aufgerufen, wenn ein Spieler eine Karte in den Kartenslot gelegt oder entfernt hat Dieses wird per Event den anderen
 Spielern in der Runde ersichtbar
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>slot</CODE> - die Nummer des Kartenslots (0,..,4)<DD><CODE>set</CODE> - 0, wenn gesetzt und 1, wenn Karte entfernt wurde<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="changePlayerToWatcher(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
changePlayerToWatcher</H3>
<PRE>
void <B>changePlayerToWatcher</B>(int&nbsp;roundId,
                           int&nbsp;playerId,
                           com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Wird aufgerufen, wenn ein Spieler in einer Spierunde endgültig gestorben ist, um den Status eines Watchers anzunehmen
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getPlayers(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
getPlayers</H3>
<PRE>
void <B>getPlayers</B>(int&nbsp;roundID,
                com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&gt;&gt;&nbsp;callback)</PRE>
<DL>
<DD>Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.
 
 Liefert eine HashMap mit Playern. Als Key wird die UserID verwendet.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - Die Round, deren Player erfragt werden sollen</DL>
</DD>
</DL>
<HR>

<A NAME="getPlayersAndWatchers(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
getPlayersAndWatchers</H3>
<PRE>
void <B>getPlayersAndWatchers</B>(int&nbsp;roundID,
                           com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&gt;&gt;&nbsp;callback)</PRE>
<DL>
<DD>Liefert alle Player und Watcher in einer Map. (casten)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getRound(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
getRound</H3>
<PRE>
void <B>getRound</B>(int&nbsp;roundID,
              com.google.gwt.user.client.rpc.AsyncCallback&lt;<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&gt;&nbsp;callback)</PRE>
<DL>
<DD>Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.
 
 Gibt die RoundInfo zu einer Round zurück. Hier ist nicht das richtige PlayingBoard gespeichert!
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - Die ID der Round
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Wird geworfen, wenn die roundID ungültig ist.</DL>
</DD>
</DL>
<HR>

<A NAME="getRounds(com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
getRounds</H3>
<PRE>
void <B>getRounds</B>(com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/RoundInfo.html" title="class in prototyp.shared.round">RoundInfo</A>&gt;&gt;&nbsp;callback)</PRE>
<DL>
<DD>Benutzt vom <A HREF="../../../prototyp/client/presenter/lobby/LobbyPagePresenter.html" title="class in prototyp.client.presenter.lobby"><CODE>LobbyPagePresenter</CODE></A>.
 
 Liefert eine HashMap mit RoundInfos. Der Key ist die RoundID
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getWatchers(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
getWatchers</H3>
<PRE>
void <B>getWatchers</B>(int&nbsp;roundID,
                 com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.Map&lt;java.lang.Integer,<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&gt;&gt;&nbsp;callback)</PRE>
<DL>
<DD>Benutzt vom <A HREF="../../../prototyp/client/presenter/pregame/PreGamePagePresenter.html" title="class in prototyp.client.presenter.pregame"><CODE>PreGamePagePresenter</CODE></A>.
 
 Liefert eine Map mit Watchern. Als Key wird die UserID verwendet.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - Die Round, deren Player erfragt werden sollen</DL>
</DD>
</DL>
<HR>

<A NAME="receiveProgrammingCards(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
receiveProgrammingCards</H3>
<PRE>
void <B>receiveProgrammingCards</B>(int&nbsp;roundId,
                             int&nbsp;playerId,
                             com.google.gwt.user.client.rpc.AsyncCallback&lt;java.util.List&lt;<A HREF="../../../prototyp/shared/programmingcard/Programmingcard.html" title="class in prototyp.shared.programmingcard">Programmingcard</A>&gt;&gt;&nbsp;callback)</PRE>
<DL>
<DD>Wird aufgerufen, um Programmierkarten per Event-Service anzufordern.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Runde, die angesprochen werden soll<DD><CODE>playerId</CODE> - der Player, der Karten anfordert<DD><CODE>callback</CODE> - Callback, der einen nicht weiter benötigten boolean kapselt</DL>
</DD>
</DL>
<HR>

<A NAME="removeFromAllRounds(java.util.List, prototyp.shared.useradministration.User, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removeFromAllRounds</H3>
<PRE>
void <B>removeFromAllRounds</B>(java.util.List&lt;java.lang.Integer&gt;&nbsp;rounds,
                         <A HREF="../../../prototyp/shared/useradministration/User.html" title="class in prototyp.shared.useradministration">User</A>&nbsp;user,
                         com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Löscht einen User aus allen angegebenen Rounds. Außerdem wird die Round gelöscht, fall er GI war. Wird aufgerufen sobald
 der User die Seite verlässt.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rounds</CODE> - <DD><CODE>user</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="removePlayer(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removePlayer</H3>
<PRE>
void <B>removePlayer</B>(int&nbsp;roundId,
                  int&nbsp;player,
                  com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>entfernt einen Spieler aus der laufenden Spielrunde
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="removePlayer(prototyp.shared.round.Player, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removePlayer</H3>
<PRE>
void <B>removePlayer</B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
                  int&nbsp;roundID,
                  com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</PRE>
<DL>
<DD>Löscht den Spieler aus der Runde
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>player</CODE> - Spieler</DL>
</DD>
</DL>
<HR>

<A NAME="removePlayerOnUnload(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removePlayerOnUnload</H3>
<PRE>
void <B>removePlayerOnUnload</B>(int&nbsp;roundId,
                          int&nbsp;playerId,
                          com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Entfernt eines Spieler aus einer laufenden Runde. Diese Methode soll aufgerufen werden, wenn der Spieler die Runde nicht
 über den Beenden-Button verlässt sondern die Robocraftseite.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - <DD><CODE>playerId</CODE> - <DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="removeRound(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removeRound</H3>
<PRE>
void <B>removeRound</B>(int&nbsp;roundID,
                 com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</PRE>
<DL>
<DD>Löscht eine Runde aus dem RoundManager (wenn der Gameinitiator auf "Abbrechen" klickt)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - die zu löschende Runde</DL>
</DD>
</DL>
<HR>

<A NAME="removeWatcher(prototyp.shared.round.Watcher, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removeWatcher</H3>
<PRE>
void <B>removeWatcher</B>(<A HREF="../../../prototyp/shared/round/Watcher.html" title="class in prototyp.shared.round">Watcher</A>&nbsp;watcher,
                   int&nbsp;roundID,
                   com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;Callback)</PRE>
<DL>
<DD>Löscht den Beobachter aus der Runde
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>watcher</CODE> - Beobachter</DL>
</DD>
</DL>
<HR>

<A NAME="saveStatisticsInDB(int, int, java.util.Map, java.util.Map, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
saveStatisticsInDB</H3>
<PRE>
void <B>saveStatisticsInDB</B>(int&nbsp;roundId,
                        int&nbsp;winnerId,
                        java.util.Map&lt;java.lang.Integer,java.lang.Integer&gt;&nbsp;statistic,
                        java.util.Map&lt;java.lang.Integer,java.util.Set&lt;java.lang.Integer&gt;&gt;&nbsp;awards,
                        com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Trägt die Statistiken der Spieler nach Beendigung einer Spielrunde in die DB ein.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die entprechende Runde<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="sendProgrammingcards(int, int, java.util.List, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
sendProgrammingcards</H3>
<PRE>
void <B>sendProgrammingcards</B>(int&nbsp;roundId,
                          int&nbsp;playerId,
                          java.util.List&lt;<A HREF="../../../prototyp/shared/programmingcard/Programmingcard.html" title="class in prototyp.shared.programmingcard">Programmingcard</A>&gt;&nbsp;cards,
                          com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Wird vom Spieler aufgerufen, nachdem er seine Programmierkarten gewählt und auf bereit geklickt hat. Diese Methode liefert
 immer true, da er die Karten der anderen Spieler per Event zugeschickt bekommt, wenn diese alle ihre Karten an den Server
 gesendet haben.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="sendRequestStepReady(int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
sendRequestStepReady</H3>
<PRE>
void <B>sendRequestStepReady</B>(int&nbsp;roundId,
                          int&nbsp;playerId,
                          int&nbsp;userState,
                          com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Wird vom Spieler nach Abarbeitung eines Spielschritts aufgerufen
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>userState</CODE> - der Status, der der Spieler momentan hat. Gibt an ob der Spieler nun Roboter ist<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="sendRestartField(int, int, int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
sendRestartField</H3>
<PRE>
void <B>sendRestartField</B>(int&nbsp;roundId,
                      int&nbsp;playerId,
                      int&nbsp;i,
                      int&nbsp;j,
                      com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Spieler sendet sein Restartfield an den Server
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - die Id der entsprechenden Spielrunde<DD><CODE>player</CODE> - die User-Id des entsprechenden Spielers<DD><CODE>i</CODE> - der i-Index des RestartFields<DD><CODE>j</CODE> - der j-Index des RestartFields<DD><CODE>callback</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setPlayerColor(prototyp.shared.round.Player, int, prototyp.shared.util.Color, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
setPlayerColor</H3>
<PRE>
void <B>setPlayerColor</B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
                    int&nbsp;roundID,
                    <A HREF="../../../prototyp/shared/util/Color.html" title="enum in prototyp.shared.util">Color</A>&nbsp;color,
                    com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Setzt eine Farbe für einen Player
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setPlayerReady(prototyp.shared.round.Player, int, boolean, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
setPlayerReady</H3>
<PRE>
void <B>setPlayerReady</B>(<A HREF="../../../prototyp/shared/round/Player.html" title="class in prototyp.shared.round">Player</A>&nbsp;player,
                    int&nbsp;roundID,
                    boolean&nbsp;flak,
                    com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Setzt einen Spieler auf das Attribut flag. Wirft außerdem ein InternalRoundEvent
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>player</CODE> - Player<DD><CODE>roundID</CODE> - RundenID<DD><CODE>flag</CODE> - Angabe, ob er bereit oder nicht ist</DL>
</DD>
</DL>
<HR>

<A NAME="setRobotPositionAndColor(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
setRobotPositionAndColor</H3>
<PRE>
void <B>setRobotPositionAndColor</B>(int&nbsp;roundID,
                              com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Setzt alle Robots der Player, setzt eine Farbe für jeden Player (der noch keine gewählt hat)
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="startCountDown(int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
startCountDown</H3>
<PRE>
void <B>startCountDown</B>(int&nbsp;roundID,
                    com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD>Startet den CountDown, bevor die Round los geht.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundID</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="abortFromRound(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
abortFromRound</H3>
<PRE>
void <B>abortFromRound</B>(int&nbsp;roundId,
                    int&nbsp;playerId,
                    com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>roundId</CODE> - Die ID der Spielrunde<DD><CODE>playerId</CODE> - Die UserID des Spielers
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../prototyp/shared/exception/RoundNotThereException.html" title="class in prototyp.shared.exception">RoundNotThereException</A></CODE> - Wird geworfen, wenn die Runde nicht existiert</DL>
</DD>
</DL>
<HR>

<A NAME="removeWatcher(int, int, com.google.gwt.user.client.rpc.AsyncCallback)"><!-- --></A><H3>
removeWatcher</H3>
<PRE>
void <B>removeWatcher</B>(int&nbsp;watcher,
                   int&nbsp;roundID,
                   com.google.gwt.user.client.rpc.AsyncCallback&lt;java.lang.Boolean&gt;&nbsp;callback)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/RoundManagerServiceAsync.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../prototyp/client/service/RoundManagerService.html" title="interface in prototyp.client.service"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../prototyp/client/service/UserService.html" title="interface in prototyp.client.service"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?prototyp/client/service/RoundManagerServiceAsync.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="RoundManagerServiceAsync.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
